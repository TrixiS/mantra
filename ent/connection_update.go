// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TrixiS/mantra/ent/connection"
	"github.com/TrixiS/mantra/ent/predicate"
	"github.com/TrixiS/mantra/ent/user"
)

// ConnectionUpdate is the builder for updating Connection entities.
type ConnectionUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectionMutation
}

// Where appends a list predicates to the ConnectionUpdate builder.
func (cu *ConnectionUpdate) Where(ps ...predicate.Connection) *ConnectionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetLocalID sets the "local_id" field.
func (cu *ConnectionUpdate) SetLocalID(i int) *ConnectionUpdate {
	cu.mutation.ResetLocalID()
	cu.mutation.SetLocalID(i)
	return cu
}

// SetNillableLocalID sets the "local_id" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableLocalID(i *int) *ConnectionUpdate {
	if i != nil {
		cu.SetLocalID(*i)
	}
	return cu
}

// AddLocalID adds i to the "local_id" field.
func (cu *ConnectionUpdate) AddLocalID(i int) *ConnectionUpdate {
	cu.mutation.AddLocalID(i)
	return cu
}

// SetName sets the "name" field.
func (cu *ConnectionUpdate) SetName(s string) *ConnectionUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableName(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetHost sets the "host" field.
func (cu *ConnectionUpdate) SetHost(s string) *ConnectionUpdate {
	cu.mutation.SetHost(s)
	return cu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableHost(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetHost(*s)
	}
	return cu
}

// SetPort sets the "port" field.
func (cu *ConnectionUpdate) SetPort(u uint) *ConnectionUpdate {
	cu.mutation.ResetPort()
	cu.mutation.SetPort(u)
	return cu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillablePort(u *uint) *ConnectionUpdate {
	if u != nil {
		cu.SetPort(*u)
	}
	return cu
}

// AddPort adds u to the "port" field.
func (cu *ConnectionUpdate) AddPort(u int) *ConnectionUpdate {
	cu.mutation.AddPort(u)
	return cu
}

// SetUser sets the "user" field.
func (cu *ConnectionUpdate) SetUser(s string) *ConnectionUpdate {
	cu.mutation.SetUser(s)
	return cu
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableUser(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetUser(*s)
	}
	return cu
}

// SetPassword sets the "password" field.
func (cu *ConnectionUpdate) SetPassword(s string) *ConnectionUpdate {
	cu.mutation.SetPassword(s)
	return cu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillablePassword(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetPassword(*s)
	}
	return cu
}

// SetArgs sets the "args" field.
func (cu *ConnectionUpdate) SetArgs(s string) *ConnectionUpdate {
	cu.mutation.SetArgs(s)
	return cu
}

// SetNillableArgs sets the "args" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableArgs(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetArgs(*s)
	}
	return cu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cu *ConnectionUpdate) SetOwnerID(id int) *ConnectionUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetOwner sets the "owner" edge to the User entity.
func (cu *ConnectionUpdate) SetOwner(u *User) *ConnectionUpdate {
	return cu.SetOwnerID(u.ID)
}

// Mutation returns the ConnectionMutation object of the builder.
func (cu *ConnectionUpdate) Mutation() *ConnectionMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cu *ConnectionUpdate) ClearOwner() *ConnectionUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConnectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConnectionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConnectionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConnectionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConnectionUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := connection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Connection.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Host(); ok {
		if err := connection.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "Connection.host": %w`, err)}
		}
	}
	if v, ok := cu.mutation.User(); ok {
		if err := connection.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf(`ent: validator failed for field "Connection.user": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Password(); ok {
		if err := connection.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Connection.password": %w`, err)}
		}
	}
	if cu.mutation.OwnerCleared() && len(cu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.owner"`)
	}
	return nil
}

func (cu *ConnectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(connection.Table, connection.Columns, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.LocalID(); ok {
		_spec.SetField(connection.FieldLocalID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLocalID(); ok {
		_spec.AddField(connection.FieldLocalID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(connection.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Host(); ok {
		_spec.SetField(connection.FieldHost, field.TypeString, value)
	}
	if value, ok := cu.mutation.Port(); ok {
		_spec.SetField(connection.FieldPort, field.TypeUint, value)
	}
	if value, ok := cu.mutation.AddedPort(); ok {
		_spec.AddField(connection.FieldPort, field.TypeUint, value)
	}
	if value, ok := cu.mutation.User(); ok {
		_spec.SetField(connection.FieldUser, field.TypeString, value)
	}
	if value, ok := cu.mutation.Password(); ok {
		_spec.SetField(connection.FieldPassword, field.TypeString, value)
	}
	if value, ok := cu.mutation.Args(); ok {
		_spec.SetField(connection.FieldArgs, field.TypeString, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connection.OwnerTable,
			Columns: []string{connection.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connection.OwnerTable,
			Columns: []string{connection.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConnectionUpdateOne is the builder for updating a single Connection entity.
type ConnectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectionMutation
}

// SetLocalID sets the "local_id" field.
func (cuo *ConnectionUpdateOne) SetLocalID(i int) *ConnectionUpdateOne {
	cuo.mutation.ResetLocalID()
	cuo.mutation.SetLocalID(i)
	return cuo
}

// SetNillableLocalID sets the "local_id" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableLocalID(i *int) *ConnectionUpdateOne {
	if i != nil {
		cuo.SetLocalID(*i)
	}
	return cuo
}

// AddLocalID adds i to the "local_id" field.
func (cuo *ConnectionUpdateOne) AddLocalID(i int) *ConnectionUpdateOne {
	cuo.mutation.AddLocalID(i)
	return cuo
}

// SetName sets the "name" field.
func (cuo *ConnectionUpdateOne) SetName(s string) *ConnectionUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableName(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetHost sets the "host" field.
func (cuo *ConnectionUpdateOne) SetHost(s string) *ConnectionUpdateOne {
	cuo.mutation.SetHost(s)
	return cuo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableHost(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetHost(*s)
	}
	return cuo
}

// SetPort sets the "port" field.
func (cuo *ConnectionUpdateOne) SetPort(u uint) *ConnectionUpdateOne {
	cuo.mutation.ResetPort()
	cuo.mutation.SetPort(u)
	return cuo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillablePort(u *uint) *ConnectionUpdateOne {
	if u != nil {
		cuo.SetPort(*u)
	}
	return cuo
}

// AddPort adds u to the "port" field.
func (cuo *ConnectionUpdateOne) AddPort(u int) *ConnectionUpdateOne {
	cuo.mutation.AddPort(u)
	return cuo
}

// SetUser sets the "user" field.
func (cuo *ConnectionUpdateOne) SetUser(s string) *ConnectionUpdateOne {
	cuo.mutation.SetUser(s)
	return cuo
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableUser(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetUser(*s)
	}
	return cuo
}

// SetPassword sets the "password" field.
func (cuo *ConnectionUpdateOne) SetPassword(s string) *ConnectionUpdateOne {
	cuo.mutation.SetPassword(s)
	return cuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillablePassword(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetPassword(*s)
	}
	return cuo
}

// SetArgs sets the "args" field.
func (cuo *ConnectionUpdateOne) SetArgs(s string) *ConnectionUpdateOne {
	cuo.mutation.SetArgs(s)
	return cuo
}

// SetNillableArgs sets the "args" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableArgs(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetArgs(*s)
	}
	return cuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cuo *ConnectionUpdateOne) SetOwnerID(id int) *ConnectionUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetOwner sets the "owner" edge to the User entity.
func (cuo *ConnectionUpdateOne) SetOwner(u *User) *ConnectionUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// Mutation returns the ConnectionMutation object of the builder.
func (cuo *ConnectionUpdateOne) Mutation() *ConnectionMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cuo *ConnectionUpdateOne) ClearOwner() *ConnectionUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// Where appends a list predicates to the ConnectionUpdate builder.
func (cuo *ConnectionUpdateOne) Where(ps ...predicate.Connection) *ConnectionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConnectionUpdateOne) Select(field string, fields ...string) *ConnectionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Connection entity.
func (cuo *ConnectionUpdateOne) Save(ctx context.Context) (*Connection, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConnectionUpdateOne) SaveX(ctx context.Context) *Connection {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConnectionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConnectionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConnectionUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := connection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Connection.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Host(); ok {
		if err := connection.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "Connection.host": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.User(); ok {
		if err := connection.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf(`ent: validator failed for field "Connection.user": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Password(); ok {
		if err := connection.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Connection.password": %w`, err)}
		}
	}
	if cuo.mutation.OwnerCleared() && len(cuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.owner"`)
	}
	return nil
}

func (cuo *ConnectionUpdateOne) sqlSave(ctx context.Context) (_node *Connection, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connection.Table, connection.Columns, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Connection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connection.FieldID)
		for _, f := range fields {
			if !connection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.LocalID(); ok {
		_spec.SetField(connection.FieldLocalID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLocalID(); ok {
		_spec.AddField(connection.FieldLocalID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(connection.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Host(); ok {
		_spec.SetField(connection.FieldHost, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Port(); ok {
		_spec.SetField(connection.FieldPort, field.TypeUint, value)
	}
	if value, ok := cuo.mutation.AddedPort(); ok {
		_spec.AddField(connection.FieldPort, field.TypeUint, value)
	}
	if value, ok := cuo.mutation.User(); ok {
		_spec.SetField(connection.FieldUser, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Password(); ok {
		_spec.SetField(connection.FieldPassword, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Args(); ok {
		_spec.SetField(connection.FieldArgs, field.TypeString, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connection.OwnerTable,
			Columns: []string{connection.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connection.OwnerTable,
			Columns: []string{connection.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Connection{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
